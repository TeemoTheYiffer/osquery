{
  "options": {
    "logger_snapshot_event_type": "true",
    "schedule_splay_percent": 10
  },
  "platform": "darwin",
  "schedule": {
    "authorized_keys": {
      "query": "SELECT * FROM users CROSS JOIN authorized_keys USING (uid);",
      "interval": 28800,
      "description": "List authorized_keys for each user on the system"
    },
    "browser_plugins": {
      "query": "SELECT * FROM users CROSS JOIN browser_plugins USING (uid);",
      "interval": 3600,
      "description": "All C/NPAPI browser plugin details for all users."
    },
    "chrome_extensions": {
      "query": "SELECT * FROM users CROSS JOIN chrome_extensions USING (uid);",
      "interval": 3600,
      "description": "List installed Chrome Extensions for all users"
    },
    "chrome_extensions_snapshot": {
      "query": "SELECT * FROM users CROSS JOIN chrome_extensions USING (uid);",
      "interval": 28800,
      "description": "Snapshot query for Chrome extensions"
    },
    "crashes": {
      "query": "SELECT uid, datetime, responsible, exception_type, identifier, version, crash_path FROM users JOIN crashes USING (uid);",
      "interval": 3600,
      "description": "Application, System, and Mobile App crash logs.",
      "removed": false
    },
    "etc_hosts": {
      "query": "SELECT * FROM etc_hosts;",
      "interval": 28800,
      "description": "List the contents of /etc/hosts"
    },
    "event_taps": {
      "query": "SELECT * FROM event_taps INNER JOIN processes ON event_taps.tapping_process = processes.pid WHERE event_tapped NOT LIKE '%mouse%' AND processes.path NOT IN ('/usr/libexec/airportd', '/usr/sbin/universalaccessd') AND processes.path NOT LIKE '/System/Library/%' AND processes.path NOT LIKE '%/steamapps/%' AND processes.path NOT LIKE '%.app%' AND event_taps.enabled=1;",
      "interval": 300,
      "description": "Returns information about installed event taps. Can be used to detect keyloggers"
    },
    "firefox_addons": {
      "query": "SELECT * FROM users CROSS JOIN firefox_addons USING (uid);",
      "interval": 3600,
      "description": "List installed Firefox addons for all users"
    },
    "installed_applications": {
      "query": "SELECT * FROM apps;",
      "interval": 3600,
      "description": "OS X applications installed in known search paths (e.g., /Applications)."
    },
    "installed_applications_snapshot": {
      "query": "SELECT name, path, bundle_short_version, bundle_version, display_name FROM apps;",
      "interval": 28800,
      "description": "Snapshot query for installed_applications",
      "snapshot": true
    },
    "ip_forwarding_enabled": {
      "query": "SELECT * FROM system_controls WHERE name LIKE '%forwarding%' AND name LIKE '%ip%' AND current_value=1;",
      "interval": 28800,
      "description": "Discover hosts that have IP forwarding enabled",
      "removed": false
    },
    "last": {
      "query": "SELECT * FROM last;",
      "interval": 3600,
      "description": "System logins and logouts.",
      "removed": false
    },
    "launchd": {
      "query": "SELECT * FROM launchd;",
      "interval": 3600,
      "description": "LaunchAgents and LaunchDaemons from default search paths."
    },
    "launchd_snapshot": {
      "query": "SELECT path, name, label, program, run_at_load, program_arguments FROM launchd WHERE run_at_load=1;",
      "interval": 28800,
      "description": "Snapshot query for launchd",
      "snapshot": true
    },
    "macosx_kextstat": {
      "query": "SELECT kernel_extensions.idx, kernel_extensions.refs, kernel_extensions.size, kernel_extensions.name, kernel_extensions.version, kernel_extensions.linked_against, kernel_extensions.path, signature.signed, signature.identifier, signature.cdhash, signature.team_identifier, signature.authority, hash.md5 FROM hash JOIN kernel_extensions ON hash.path LIKE printf('%s/Contents/MacOS/%', kernel_extensions.path) JOIN signature ON signature.path LIKE printf('%s/Contents/MacOS/%', kernel_extensions.path) WHERE signature.authority!='Software Signing';",
      "interval": 3600,
      "description": "List kernel extensions, their signing status, and their hashes (excluding extensions signed by Apple)"
    },
    "macosx_kextstat_snapshot": {
      "query": "SELECT kernel_extensions.name, kernel_extensions.version, kernel_extensions.path, signature.signed, signature.identifier, signature.cdhash, signature.team_identifier, signature.authority, hash.md5 FROM hash JOIN kernel_extensions ON hash.path LIKE printf('%s/Contents/MacOS/%', kernel_extensions.path) JOIN signature ON signature.path LIKE printf('%s/Contents/MacOS/%', kernel_extensions.path) WHERE signature.authority!='Software Signing';",
      "interval": 28800,
      "description": "Snapshot query for macosx_kextstat",
      "snapshot": true
    },
    "network_interfaces_snapshot": {
      "query": "SELECT a.interface, a.address, d.mac FROM interface_addresses a JOIN interface_details d USING (interface);",
      "interval": 600,
      "description": "Retrieve the interface name, IP address, and MAC address for all interfaces on the host.",
      "snapshot": true
    },
    "os_version": {
      "query": "SELECT * FROM os_version;",
      "interval": 28800,
      "description": "List the version of the resident operating system"
    },
    "os_version_snapshot": {
      "query": "SELECT * FROM os_version;",
      "interval": 28800,
      "description": "Operating system version snapshot query",
      "snapshot": true
    },
    "osquery_info": {
      "query": "SELECT * FROM osquery_info;",
      "interval": 28800,
      "description": "Information about the resident osquery process",
      "snapshot": true
    },
    "platform_info": {
      "query": "SELECT * FROM platform_info;",
      "interval": 28800,
      "description": "Information about EFI/UEFI/ROM and platform/boot.",
      "removed": false
    },
    "platform_info_snapshot": {
      "query": "SELECT vendor, version, date, revision from platform_info;",
      "interval": 28800,
      "description": "Platform info snapshot query"
    },
    "python_packages": {
      "query": "SELECT * FROM python_packages;",
      "interval": 3600,
      "description": "Python packages installed in a system."
    },
    "safari_extensions": {
      "query": "SELECT * FROM users CROSS JOIN safari_extensions USING (uid);",
      "interval": 3600,
      "description": "Safari browser extension details for all users."
    },
    "user_ssh_keys": {
      "query": "SELECT * FROM users JOIN user_ssh_keys USING (uid);",
      "interval": 3600,
      "description": "Returns the private keys in the users ~/.ssh directory and whether or not they are encrypted.",
      "removed": false
    },
    "users": {
      "query": "SELECT * FROM users;",
      "interval": 28800,
      "description": "Local system users."
    },
    "users_snapshot": {
      "query": "SELECT * FROM users;",
      "interval": 28800,
      "description": "Local system users."
    }
  },
  "packs": {
    "osx-attacks": "/var/osquery/packs/osx-attacks.conf",
    "incident-response": "/var/osquery/packs/incident-response.conf",
    "unwanted-chrome-extensions": "/var/osquery/packs/unwanted-chrome-extensions.conf"
  },
  "file_paths": {
    "configuration": [
      "/etc/%%"
    ],
    "binaries": [
      "/usr/bin/%%",
      "/usr/sbin/%%",
      "/bin/%%",
      "/sbin/%%",
      "/usr/local/bin/%%",
      "/usr/local/sbin/%%",
      "/opt/bin/%%",
      "/opt/sbin/%%"
    ],
    "efi": [
      "/System/Library/CoreServices/boot.efi"
    ]
  }
}